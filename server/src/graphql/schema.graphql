# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey (surveyId: Int!): Survey

  # Return a list of all cafe in database
  list_cafe: [cafeshop!]

  # Returns a list of likes
  list_like: [like!]
}

type cafeshop{

   #cafe store id
  cafeshop_id: String!

  #cafe shop name
  cafeshop_name: String!

  #Location to be added
  longtitude: Float!
  latitude: Float!

  #list of images URLS of this cafe stores
  images: [String!]

}

type menus {

  #joinColumn figure out this later(cafeId)
  cafe: cafeshop!
  #list of drinks
  items:[String!]

}

type like {
  #joined column userID with cafe fig out later
  cafe: cafeshop
  user: [User!]

}

type User {
  # NOTE: We don't put the hashedPassword here (for obvious security reasons), although it 
  # exists in the DB.

  # user's ID.
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
}

type Mutation {
  # Records an answer to a survey question presented in class.
  #answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  #nextSurveyQuestion (surveyId: Int!): Survey

  # sign up for new user, returning the new User's details
  signUp (email: String!, firstName: String!, lastName: String!, password: String!): User!
}

type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}


enum UserType { ADMIN, USER }

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

